
sum() 집계함수에서 자료형을 Integer 사용X(객체는 더할 수 없기 때문)

average() OptionalDouble 사용 이유
=> 값을 0으로 나눌 수 없기 때문에 OptionalDouble 사용
=> 값이 없으면 예외를 던짐
=> 값의 존재 여부를 확인하고 Optional 객체에서 값을 가져오려면 isPresent() 사용(조건문 이용)
=> 값이 존재하면 실행 될 Consumer 등록(ifPresent() 사용, 매개값으로 람다식을 줌) / 값이 없으면 실행X
=> Optional 객체에 값이 없으면 기본값을 지정(orElse() 메소드 사용, 매개값으로 값이 존재하지 않을 때의 기본값 지정)

max() OptionalInt 사용 이유
=> 요소가 없으면 큰값, 작은값 없기때문에.. 논리적으로 말이 되지 않기 때문에 Optional로 리턴

set : 중복 데이터 저장 불가, 인덱스 없음, 반복자를 통해서만 요소에 접근
list : 중복 데이터 저장 가능
map : 키 값은 중복되면 안됨

자료구조 => 데이터를 효율적으로 저장하는 것

컬렉션은 list or set 으로 반환해줘서 변수에 담아서 쓸 수 있다(재사용성)
Stream API에서 map()은 새로운 스트림을 생성해서 바로 출력을 해주기 때문에(반환X) 재사용 불가

추상 클래스 : 
=> 추상 메소드를 포함한 클래스(미완성의 클래스)
=> 공통적인 부분만 모아놓은 클래스
=> 인터페이스에서는 public, abstract 생략
=> 인터페이스는 필드를 가질 수 없음
=> 일반적인 추상 클래스에서는 abstract 키워드 추가
=> 인터페이스는 생성자가 없음(만들 수 없음)
=> 추상 클래스는 생성자 만들 수 있음

형변환
=> 부모 타입의 객체가 자식 타입의 객체로 형변환 가능
=> 객체 형변환 시 다운캐스팅이 이루어 지면 자기자신의 객체만 사용 가능하다.

다형성 : 형태(모양)가 다양하다
=> 같은 타입이지만 실행 결과가 다르다.
=> 재정의는 다형성이 아니다..

이클립스 초기 세팅
1. 인코딩 설정
2. 자바 컴파일러 및 jre, jdk 설정
window > Preferences > Java > Compiler > Compiler compliance level: 11 변경
window > Preferences > Java > Installed JREs

톰켓 연동
window > Preferences > Server > Runtime Environment

** 서버 **(Servlet)
webapp : HTML, CSS, JS, img ...
(Java를 제외한 리소스들을 해당 위치에 넣으면 된다.)

톰켓이 실행되면서 처음으로 web.xml을 읽어감

- Servlet 라이프 사이클
1. 요청이 오면 Servlet 객체 생성
2. init() 메소드 호출(이후 요청에 대해서는 서블릿 객체 생성, init() 메소드는 호출하지 않는다.
3. service() 메소드를 호출해서 Servlet이 브라우저의 요청을 처리하도록 함
4. service() 메소드가 클라이언트 요청 방식에 따라 doGet() 또는 doPost() 메소드 호출
5. 서버는 destroy() 메소드 호출하여 servlet 제거
(destroy() 메소드는 보통 서버가 종료되었을 때, 서블릿의 내용이 변경되어 재 컴파일 될 때 호출된다.)

초기화 할 내용이 있으면 생성자 or init 메소드 사용

JSP는 HTML 코드안에 자바 언어를 사용



클라이언트 요청이 JSP에 대한 요청일 경우 JSP 파일을 자바 코드(서블릿)로 변환
변환된 자바 파일 경로 : D:\develop\backend\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\02_JSP\org\apache\jsp


pageEncoding : java 코드에 대한 인코딩




redirect
: 요청을 재전송한다.
ex) 보통 로그인처리가 완료되었을 때 홈페이지 메인으로 자동으로 바꿔주는것과 같은 경우에
         리다이렉트를 이용해서 로그인이 완료되면 메인페이지로 바로 옮겨달라는 요청을 한다.
절대경로 => Context Path까지 적어줌


forward
: 서버 내부에서 다른 페이지로 요청을 넘김
절대경로 => URL은 Context root 기준으로 적어줌

session
클라이언트와 서버를 유지시켜주는 기술
브라우저 종료되면 세션 종료
브라우저 마다 세션이 다르게 동작(ex : chrome, edge ... )
로그인 정보를 세션에 넣어둠
세션은 서버에 저장

session.setMaxInactiveInterval(10)
=> 클라이언트의 요청이 없더라도 세션을 유지할 시간을 초 단위로 지정한다.
ex) 로그인 후 10초 동안 요청이 없으면 자동으로 로그아웃됨

cookie
클라이언트에 저장

Application 영역에는 로그인 정보 저장X
공유 데이터들 저장하는 용도로 쓰임
Application이 종료되기 전까지 유지되는 영역
종료된 후 기존에 있던 데이터는 null

redirect의 경우 요청을 두 번 하기 때문에 한 번 요청 후 응답을 받는 순간 데이터가 소멸됨

page 영역은 페이지가 바뀌는 순간 데이터가 소멸됨

- href 속성에 파일명만 줄 경우
현재 index.jsp가 있는 경로에서 부터 파일을 찾음

EL/JSTL 사용 이유
html 태그 안에 자바 코드를 사용하는 불편함,가독성
표현식 태그를 사용하는 불편함,가독성을 개선하기 위해서

Lombok 라이브러리 설치 후 사용방법
※압축파일 설치 경로 GitBash에 
 java -jar lombok.jar
입력

lombok 라이브러리
@Data //전체 메소드 (기본 생성자,getter,setter,string, equals, hashcode)
//@Getter //getter 메소드
//@Setter //setter 메소드
//@NoArgsConstructor // 기본 생성자
//@AllArgsConstructor // 전체 생성자
//@ToString //toString 메소드
//@EqualsAndHashCode //equals 와 hashcode 메소드

- EL
request 객체를 사용하려면 pageContext 내장 객체를 통해서 가져와야 한다.
ex) pageContext.request.~









