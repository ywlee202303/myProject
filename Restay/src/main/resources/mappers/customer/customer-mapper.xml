<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
	
<mapper namespace="com.practice.restay.customer.model.mapper.CustomerMapper">

	<!-- 중복 쿼리(고객센터, 회원 조인 -->
	<sql id="selectCustomerAndMemberId">
		SELECT C.CUSTOMER_NO,
		       C.CUSTOMER_TITLE,
		       C.CUSTOMER_CATEGORY,
		       C.CUSTOMER_ENROLLDATE,
		       C.CUSTOMER_MODIFYDATE,
		       C.CUSTOMER_CONTENT,
		       C.CUSTOMER_ORIGINALFILENAME,
		       C.CUSTOMER_RENAMEDFILENAME,
		       C.CUSTOMER_COUNT,
		       C.CUSTOMER_STATUS,
		       C.MEMBER_NO,
		       M.MEMBER_ID AS M_MEMBER_ID
		FROM CUSTOMER C
		LEFT OUTER JOIN MEMBER M ON (C.MEMBER_NO = M.MEMBER_NO)
	</sql>	

	<!-- 쿼리 매핑(Customer) -->
	<resultMap id="customerResultMap" type="Customer">
		<id property="customerNo" column="CUSTOMER_NO"/>
		<result property="customerTitle" column="CUSTOMER_TITLE" />
		<result property="customerCategory" column="CUSTOMER_CATEGORY" />
		<result property="customerEnrollDate" column="CUSTOMER_ENROLLDATE" />
		<result property="customerModifyDate" column="CUSTOMER_MODIFYDATE" />
		<result property="customerContent" column="CUSTOMER_CONTENT" />
		<result property="customerOriginalFileName" column="CUSTOMER_ORIGINALFILENAME" />
		<result property="customerRenamedFileName" column="CUSTOMER_RENAMEDFILENAME" />
		<result property="customerCount" column="CUSTOMER_COUNT" />
		<result property="customerStatus" column="CUSTOMER_STATUS" />
		<result property="memberNo" column="MEMBER_NO" />
		<association property="member" javaType="Member" 
			columnPrefix="M_" resultMap="com.practice.restay.member.model.mapper.MemberMapper.memberResultMap"/>
	</resultMap>
	
	<!-- 쿼리 매핑(Reply) -->
	<resultMap id="replyResultMap" type="Reply">
		<id property="replyNo" column="REPLY_NO" />
		<result property="customerNo" column="CUSTOMER_NO" />
		<result property="writerNo" column="WRITER_NO" />
		<result property="replyContent" column="REPLY_CONTENT" />
		<result property="replyStatus" column="REPLY_STATUS" />
		<result property="replyCreateDate" column="REPLY_CREATEDATE" />
		<result property="replyModifyDate" column="REPLY_MODIFYDATE" />
		<result property="writerId" column="WRITER_ID" />
	</resultMap>
	
	<!-- 고객센터(공지사항, 자유게시판, 자주 묻는 질문 카운트)  -->
	<select id="selectCustomerCount">
		SELECT COUNT(*)
		FROM CUSTOMER
		WHERE CUSTOMER_STATUS = 'Y'
		<choose>
			<when test="menu.equals('notice')">
				AND CUSTOMER_CATEGORY = '[공지사항]'
			</when>
			<when test="menu.equals('board')">
				AND CUSTOMER_CATEGORY = '[자유게시판]'
			</when>
			<when test="menu.equals('question')">
				AND CUSTOMER_CATEGORY = '[자주 묻는 질문]'
			</when>
		</choose>
	</select>
	
	<!-- 고객센터(1:1문의 카운트) -->
	<select id="selectCustomerInquiryCount">
		SELECT COUNT(*)
		FROM CUSTOMER
		WHERE CUSTOMER_STATUS = 'Y'
		  AND CUSTOMER_CATEGORY = '[1:1문의]'
	</select>
	
	<!-- 댓글 카운트 -->
	<select id="selectReplyCount" parameterType="string">
		SELECT COUNT(*)
		FROM REPLY
		WHERE REPLY_STATUS = 'Y'
		  AND CUSTOMER_NO = #{customerNo}
	</select>
	
	<!-- 고객센터(공지사항, 자유게시판, 자주 묻는 질문 리스트) -->
	<select id="selectCustomerList" resultMap="customerResultMap">
		<include refid="selectCustomerAndMemberId" />
		WHERE CUSTOMER_STATUS = 'Y'
		<choose>
			<when test="menu.equals('notice')">
				AND CUSTOMER_CATEGORY = '[공지사항]'
			</when>
			<when test="menu.equals('board')">
				AND CUSTOMER_CATEGORY = '[자유게시판]'
			</when>
			<when test="menu.equals('question')">
				AND CUSTOMER_CATEGORY = '[자주 묻는 질문]'
			</when>
		</choose>
		ORDER BY CUSTOMER_ENROLLDATE DESC
	</select>
	
	<!-- 고객센터(1:1문의) -->
	<select id="selectCustomerInquiryList" resultMap="customerResultMap">
		<include refid="selectCustomerAndMemberId" />
		WHERE CUSTOMER_STATUS = 'Y'
		  AND CUSTOMER_CATEGORY = '[1:1문의]'
		ORDER BY CUSTOMER_ENROLLDATE DESC
	</select>
	
	<!-- 고객센터 상세 조회(공지사항, 자유게시판, 자주 묻는 질문) -->
	<select id="selectDetailCustomer" resultMap="customerResultMap" parameterType="string">
		<include refid="selectCustomerAndMemberId" />
		WHERE CUSTOMER_STATUS = 'Y'
		  AND CUSTOMER_NO = #{customerNo}
	</select>
	
	<!-- 댓글 조회 -->
	<select id="selectReplyList" resultMap="replyResultMap" parameterType="string">
		SELECT R.REPLY_NO,
		       R.CUSTOMER_NO,
		       R.WRITER_NO,
		       R.REPLY_CONTENT,
		       R.REPLY_STATUS,
		       R.REPLY_CREATEDATE,
		       R.REPLY_MODIFYDATE,
		       M.MEMBER_ID AS WRITER_ID
		FROM REPLY R
		LEFT OUTER JOIN MEMBER M ON (R.WRITER_NO = M.MEMBER_NO)
		WHERE REPLY_STATUS = 'Y'
		  AND CUSTOMER_NO = #{customerNo}
		ORDER BY REPLY_CREATEDATE DESC
	</select>

	<!-- 고객센터 글 등록 -->
	<insert id="insertCustomerInfo" keyProperty="customerNo" keyColumn="CUSTOMER_NO">
		INSERT INTO CUSTOMER
		(
			CUSTOMER_NO,
			CUSTOMER_TITLE,
			CUSTOMER_CATEGORY,
			CUSTOMER_CONTENT,
			CUSTOMER_ORIGINALFILENAME,
			CUSTOMER_RENAMEDFILENAME,
			MEMBER_NO
		)
		VALUES
		(
			'C' || SEQ_CUSTOMER_NO.NEXTVAL,
			#{customerTitle},
			#{customerCategory},
			#{customerContent},
			#{customerOriginalFileName},
			#{customerRenamedFileName},
			#{memberNo}
		)
	</insert>
	
	<!-- 고객센터 1:1문의 등록 -->
	<insert id="insertCustomerInquiryInfo" keyProperty="customerNo" keyColumn="CUSTOMER_NO">
		INSERT INTO CUSTOMER
		(
			CUSTOMER_NO,
			CUSTOMER_TITLE,
			CUSTOMER_CATEGORY,
			CUSTOMER_CONTENT,
			MEMBER_NO
		)
		VALUES
		(
			'C' || SEQ_CUSTOMER_NO.NEXTVAL,
			#{customerTitle},
			#{customerCategory},
			#{customerContent},
			#{memberNo}
		)
	</insert>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" keyProperty="replyNo" keyColumn="REPLY_NO">
		INSERT INTO REPLY
		(
			REPLY_NO,
			CUSTOMER_NO,
			WRITER_NO,
			REPLY_CONTENT
		)
		VALUES
		(
			'R' || SEQ_REPLY_NO.NEXTVAL,
			#{customerNo},
			#{writerNo},
			#{replyContent}
		)
	</insert>
	
	<!-- 조회수 업데이트 -->
	<update id="updateCustomerCount" parameterType="map">
		UPDATE CUSTOMER
		SET CUSTOMER_COUNT = #{viewCount}
		WHERE CUSTOMER_NO = #{customerNo}
	</update>
</mapper>